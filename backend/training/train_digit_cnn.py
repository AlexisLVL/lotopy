"""
Script d'entra√Ænement d'un mod√®le CNN pour la reconnaissance de chiffres (0‚Äì9)
Bas√© sur les images g√©n√©r√©es avec la police Rockwell.
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# ===============================
# ‚öôÔ∏è CONFIGURATION
# ===============================
DATASET_DIR = "training/digit_dataset"
MODEL_PATH = "app/models/digit_cnn.keras"
IMG_SIZE = (64, 64)
BATCH_SIZE = 32
EPOCHS = 10  # Ajuste selon ton PC (10 √† 30 donne d√©j√† de bons r√©sultats)

# ===============================
# üì¶ CHARGEMENT DU DATASET
# ===============================
datagen = ImageDataGenerator(
    rescale=1.0/255.0,
    validation_split=0.2,  # 20% pour validation
)

train_gen = datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMG_SIZE,
    color_mode="grayscale",
    class_mode="categorical",
    batch_size=BATCH_SIZE,
    subset="training",
    shuffle=True
)

val_gen = datagen.flow_from_directory(
    DATASET_DIR,
    target_size=IMG_SIZE,
    color_mode="grayscale",
    class_mode="categorical",
    batch_size=BATCH_SIZE,
    subset="validation"
)

# ===============================
# üß† D√âFINITION DU MOD√àLE CNN
# ===============================
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE[0], IMG_SIZE[1], 1)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dropout(0.3),
    layers.Dense(10, activation='softmax')  # 10 chiffres (0‚Äì9)
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()

# ===============================
# üöÄ ENTRA√éNEMENT
# ===============================
history = model.fit(
    train_gen,
    validation_data=val_gen,
    epochs=EPOCHS
)

# ===============================
# üíæ SAUVEGARDE DU MOD√àLE
# ===============================
os.makedirs(os.path.dirname(MODEL_PATH), exist_ok=True)
model.save(MODEL_PATH)
print(f"‚úÖ Mod√®le sauvegard√© : {MODEL_PATH}")

# ===============================
# üìä √âVALUATION FINALE
# ===============================
loss, acc = model.evaluate(val_gen)
print(f"üìà Validation accuracy : {acc*100:.2f}%")
